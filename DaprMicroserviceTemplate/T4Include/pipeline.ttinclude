<#@ output extension=".yml" #>

<#@ assembly name="System.Collections.dll" #>

<#
 var path = this.Host.ResolvePath(".");
 var bits = path.Split('\\');
 var projdir = bits[bits.Length - 2];
#>
<#
var props= new System.Collections.Generic.Dictionary<string,string>();
string line;
System.IO.StreamReader file = new System.IO.StreamReader(this.Host.ResolvePath("deploy/data.txt"));
while((line = file.ReadLine()) != null)  
{  
    var index = line.IndexOf('=');
    var key = line.Substring(0,index);
    var value = line.Substring(index + 1);
	props.Add(key,value);
}  
var UseSolutionAsBuildContext = false;
if (props.ContainsKey("buildcontextissolution"))
{
    if (props["buildcontextissolution"] == "1")
    {
        UseSolutionAsBuildContext = true;
    }
}
 #>
# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

resources:
- repo: self
  
trigger:
  branches:
    include:
    - master
    - develop
    - features/*
  paths:
    include:
    - MicroserviceSolution/<#= projdir #>/*
    exclude:
    - README.md
  
stages:
- stage: Build
  displayName: Build stage

  jobs:  
  - job: Build
    variables:
    - group: '<#= props["devvargroup"] #>'
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'

 

    steps:     
      
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: <#= props["service"] #>
        dockerfile: '**/<#= projdir #>/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
<# if (UseSolutionAsBuildContext)
   {
#>
        buildContext: './MicroserviceSolution'
<# }
    else
    {
#>
        buildContext: './MicroserviceSolution/<#= projdir #>'
<# } #>
        tags: |
          $(tag) 
       
    - task: PublishPipelineArtifact@0
      inputs:
        targetPath: MicroserviceSolution/<#= projdir #>/deploy

- stage: TagAsLatest
  displayName: TagAsLatest
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:  
  - job: TagAsLatest
    displayName: TagAsLatest
    pool:
      vmImage: 'ubuntu-latest'
    steps:            
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          docker login <#= props["acrregistry"] #> -u <#= props["registryuser"] #> -p <#= props["registrypassword"] #>
          docker pull <#= props["acrregistry"] #>/<#= props["service"] #>:$(tag)
          docker tag <#= props["acrregistry"] #>/<#= props["service"] #>:$(tag) <#= props["acrregistry"] #>/<#= props["service"] #>:latest
          docker push <#= props["acrregistry"] #>/<#= props["service"] #>:latest
          
  

- stage: DeployToDev
  displayName: Deploy to Dev
  dependsOn: Build
  jobs:
  - deployment: Deploy
    variables:
    - group: '<#= props["devvargroup"] #>'
    displayName: Deploying to Development
    pool:
      name: 'PHP and Brandsites POOL'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:              
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection) 
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/drop/deployDev.yaml 
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/<#= props["service"] #>:$(tag)


- stage: DeployToProd
  displayName: Deploy to prod
  dependsOn: TagAsLatest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: Deploy
    variables:
    - group: '<#= props["prodvargroup"] #>'
    displayName: Deploying to Production
    pool:
      name: 'PHP and Brandsites POOL'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
              
          
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection) 
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/drop/deployProd.yaml  
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/<#= props["service"] #>:latest

          - task: Kubernetes@1
            displayName: Restarting <#= props["service"] #>...
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              command: rollout  
              arguments: restart deployment <#= props["service"] #>app            
              versionSpec: 
              checkLatest: true

